import numpy as np
import pandas as pd
music_data = pd.read_csv("drive/MyDrive/Colab Notebooks/music.csv")
music_data = pd.read_csv("https://raw.githubusercontent.com/schogini/ml-sree/master/data/music.csv")
music_data

age	gender	genre
0	20	1	HipHop
1	23	1	HipHop
2	25	1	HipHop
3	26	1	Jazz
4	29	1	Jazz
5	30	1	Jazz
6	31	1	Classical
7	33	1	Classical
8	37	1	Classical
9	20	0	Dance
10	21	0	Dance
11	25	0	Dance
12	26	0	Acoustic
13	27	0	Acoustic
14	30	0	Acoustic
15	31	0	Classical
16	34	0	Classical
17	35	0	Classical

music_data.shape
(18, 3)
music_data.head

<bound method NDFrame.head of     age  gender      genre
0    20       1     HipHop
1    23       1     HipHop
2    25       1     HipHop
3    26       1       Jazz
4    29       1       Jazz
5    30       1       Jazz
6    31       1  Classical
7    33       1  Classical
8    37       1  Classical
9    20       0      Dance
10   21       0      Dance
11   25       0      Dance
12   26       0   Acoustic
13   27       0   Acoustic
14   30       0   Acoustic
15   31       0  Classical
16   34       0  Classical
17   35       0  Classical>

music_data.describe()


age	gender
count	18.000000	18.000000
mean	27.944444	0.500000
std	5.127460	0.514496
min	20.000000	0.000000
25%	25.000000	0.000000
50%	28.000000	0.500000
75%	31.000000	1.000000
max	37.000000	1.000000

X = music_data.drop(columns=['genre'])
X

age	gender
0	20	1
1	23	1
2	25	1
3	26	1
4	29	1
5	30	1
6	31	1
7	33	1
8	37	1
9	20	0
10	21	0
11	25	0
12	26	0
13	27	0
14	30	0
15	31	0
16	34	0
17	35	0

y = music_data['genre']
y

0        HipHop
1        HipHop
2        HipHop
3          Jazz
4          Jazz
5          Jazz
6     Classical
7     Classical
8     Classical
9         Dance
10        Dance
11        Dance
12     Acoustic
13     Acoustic
14     Acoustic
15    Classical
16    Classical
17    Classical
Name: genre, dtype: object

from sklearn.tree import DecisionTreeClassifier

model = DecisionTreeClassifier()
model.fit(X, y)


# DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_impurity_split=None,
                       min_samples_leaf=1, min_samples_split=2,
                       min_weight_fraction_leaf=0.0, presort='deprecated',
                       random_state=None, splitter='best')

# preditions = model.predict([ [21,1], [22,0]])
preditions = model.predict([ [21,1]])
preditions

array(['HipHop'], dtype=object)

preditions = model.predict([ [26,0]])
preditions 

array(['Acoustic'], dtype=object)



from sklearn.model_selection import train_test_split
music_data = pd.read_csv("drive/MyDrive/Colab Notebooks/music.csv")
X = music_data.drop(columns=['genre'])
y = music_data['genre']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

import joblib
joblib.dump(model, 'music-recommender.joblib')

#model2 = joblib.load('music-recommender.joblib')
#predictions = model2.predict(X_test)

model2 = DecisionTreeClassifier()
model2.fit(X, y)

predictions = model2.predict([ [26,0]])
predictions

array(['Acoustic'], dtype=object)



from sklearn import tree
tree.export_graphviz(model2, out_file="music_rec.dot", feature_names=['age', 'gender'], 
                     class_names = sorted(y.unique()), label='all', rounded=True, filled=True)

! dot -Tpng music_rec.dot -o tree.png

from IPython.display import Image
Image(filename='tree.png') 

